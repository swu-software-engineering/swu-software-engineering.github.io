---
layout:     post
title:      "【斗兽棋游戏实现】"
subtitle:   "\"实现斗兽棋或其他游戏\""
date:       2024-10-28 00:00:00
author:     
header-img: "img/post-bg-2015.jpg"
catalog: true

---

## 要求

根据上课的内容，实现一个斗兽棋的代码。或者其他游戏项目。

## 提交的内容

1. 程序源码；
2. 运行截图；
3. 代码说明。

可以放到一个压缩包中

## 参考代码

```c
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define SIZE 5     // 棋盘大小 (5x5)
#define EMPTY ' '  // 空格字符表示空位
#define HUMAN 'H'  // 人类玩家
#define AI 'A'     // AI 玩家

// 定义棋子强度
const int human_pieces[] = {1, 2, 3, 4, 5, 6, 7, 8}; // 人类玩家的棋子（1表示鼠，8表示象）
const int ai_pieces[] = {1, 2, 3, 4, 5, 6, 7, 8};    // AI的棋子

typedef struct {
    int x;
    int y;
    int strength;
    char owner;
} Piece;

Piece board[SIZE][SIZE]; // 棋盘

void initializeBoard() {
    // 初始化棋盘，放置人类和AI的棋子
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            board[i][j].strength = 0;
            board[i][j].owner = EMPTY;
        }
    }

    // 放置人类棋子
    board[0][0] = (Piece){0, 0, 1, HUMAN}; // 人类鼠
    board[0][1] = (Piece){0, 1, 2, HUMAN}; // 人类猫
    board[0][2] = (Piece){0, 2, 3, HUMAN}; // 人类狼
    board[0][3] = (Piece){0, 3, 4, HUMAN}; // 人类狗
    board[0][4] = (Piece){0, 4, 5, HUMAN}; // 人类豹

    // 放置AI棋子
    board[4][0] = (Piece){4, 0, 1, AI};    // AI 鼠
    board[4][1] = (Piece){4, 1, 2, AI};    // AI 猫
    board[4][2] = (Piece){4, 2, 3, AI};    // AI 狼
    board[4][3] = (Piece){4, 3, 4, AI};    // AI 狗
    board[4][4] = (Piece){4, 4, 5, AI};    // AI 豹
}

void printBoard() {
    // 显示棋盘
}

int isValidMove(int sx, int sy, int dx, int dy, char player) {
    if (dx < 0 || dx >= SIZE || dy < 0 || dy >= SIZE) return 0; // 边界检查
    if (board[sx][sy].owner != player) return 0;               // 检查是否为当前玩家的棋子
    if (board[dx][dy].owner == player) return 0;               // 目标位置是否为空或敌方棋子

    // 检查目标是否可以吃掉敌方棋子
    if (board[dx][dy].owner != EMPTY && board[dx][dy].strength > board[sx][sy].strength) {
        return 0;
    }

    return 1;
}

void movePiece(int sx, int sy, int dx, int dy) {
    board[dx][dy] = board[sx][sy];
    board[dx][dy].x = dx;
    board[dx][dy].y = dy;
    board[sx][sy].owner = EMPTY;
    board[sx][sy].strength = 0;
}

void aiMove() {
    int sx, sy, dx, dy;
    while (1) {
        // 随机选择AI的棋子
        sx = rand() % SIZE;
        sy = rand() % SIZE;
        if (board[sx][sy].owner == AI) {
            dx = sx + (rand() % 3 - 1);
            dy = sy + (rand() % 3 - 1);
            if (isValidMove(sx, sy, dx, dy, AI)) {
                movePiece(sx, sy, dx, dy);
                printf("AI moves from (%d, %d) to (%d, %d)\n", sx, sy, dx, dy);
                break;
            }
        }
    }
}

int checkWin(char player) {
}

int main() {
    srand(time(NULL));
    initializeBoard();

    int sx, sy, dx, dy;
    while (1) {
        printBoard();

        // 检查人类玩家是否获胜
        if (checkWin(AI)) {
            printf("Human wins!\n");
            break;
        }

        // 人类玩家移动
        printf("Human, enter your move (source_x source_y dest_x dest_y): ");
        scanf("%d %d %d %d", &sx, &sy, &dx, &dy);
        if (isValidMove(sx, sy, dx, dy, HUMAN)) {
            movePiece(sx, sy, dx, dy);
        } else {
            printf("Invalid move. Try again.\n");
            continue;
        }

        // 检查AI是否获胜
        if (checkWin(HUMAN)) {
            printf("AI wins!\n");
            break;
        }

        // AI移动
        aiMove();
    }

    return 0;
}
```

## 代码展示

